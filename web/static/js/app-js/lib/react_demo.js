'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*ECMAScript 2015 format*/

var CommentBox = function (_React$Component) {
  _inherits(CommentBox, _React$Component);

  function CommentBox(props) {
    _classCallCheck(this, CommentBox);

    var _this = _possibleConstructorReturn(this, (CommentBox.__proto__ || Object.getPrototypeOf(CommentBox)).call(this, props));

    _this.state = { data: [] };

    //Bind "this" keyword
    _this.loadCommentsFromServer = _this.loadCommentsFromServer.bind(_this);
    _this.handleCommentSubmit = _this.handleCommentSubmit.bind(_this);
    _this.componentDidMount = _this.componentDidMount.bind(_this);
    _this.render = _this.render.bind(_this);
    return _this;
  }

  _createClass(CommentBox, [{
    key: 'loadCommentsFromServer',
    value: function loadCommentsFromServer() {
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: function (data) {
          this.setState({ data: data });
        }.bind(this),
        error: function (xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    }
  }, {
    key: 'handleCommentSubmit',
    value: function handleCommentSubmit(comment) {
      var comments = this.state.data;
      // Optimistically set an id on the new comment. It will be replaced by an
      // id generated by the server. In a production application you would likely
      // not use Date.now() for this and would have a more robust system in place.
      comment.id = Date.now();
      var newComments = comments.concat([comment]);
      this.setState({ data: newComments });

      $.ajax({
        url: this.props.url,
        dataType: 'json',
        type: 'POST',
        data: comment,
        success: function (data) {
          this.setState({ data: data });
        }.bind(this),
        error: function (xhr, status, err) {
          this.setState({ data: comments });
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.loadCommentsFromServer();
      setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: 'commentBox' },
        React.createElement(
          'hi',
          null,
          'Comments'
        ),
        React.createElement(CommentList, { data: this.state.data }),
        React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
      );
    }
  }]);

  return CommentBox;
}(React.Component);

var CommentList = function (_React$Component2) {
  _inherits(CommentList, _React$Component2);

  function CommentList(props) {
    _classCallCheck(this, CommentList);

    //Bind "this" keyword
    var _this2 = _possibleConstructorReturn(this, (CommentList.__proto__ || Object.getPrototypeOf(CommentList)).call(this, props));

    _this2.render = _this2.render.bind(_this2);
    return _this2;
  }

  _createClass(CommentList, [{
    key: 'render',
    value: function render() {
      var commentNodes = this.props.data.map(function (comment) {
        return React.createElement(
          Comment,
          { author: comment.author, key: comment.id },
          comment.text
        );
      });

      return React.createElement(
        'div',
        { className: 'commentList' },
        commentNodes
      );
    }
  }]);

  return CommentList;
}(React.Component);

var CommentForm = function (_React$Component3) {
  _inherits(CommentForm, _React$Component3);

  function CommentForm(props) {
    _classCallCheck(this, CommentForm);

    var _this3 = _possibleConstructorReturn(this, (CommentForm.__proto__ || Object.getPrototypeOf(CommentForm)).call(this, props));

    _this3.state = { author: '', text: '' };
    //Need to bind all methods that reference "this" keyword
    _this3.handleAuthorChange = _this3.handleAuthorChange.bind(_this3);
    _this3.handleTextChange = _this3.handleTextChange.bind(_this3);
    _this3.handleSubmit = _this3.handleSubmit.bind(_this3);
    _this3.render = _this3.render.bind(_this3);
    return _this3;
  }

  _createClass(CommentForm, [{
    key: 'handleAuthorChange',
    value: function handleAuthorChange(e) {
      this.setState({ author: e.target.value });
    }
  }, {
    key: 'handleTextChange',
    value: function handleTextChange(e) {
      this.setState({ text: e.target.value });
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(e) {
      e.preventDefault();
      var author = this.state.author.trim();
      var text = this.state.text.trim();
      if (!text || !author) {
        return;
      }
      this.props.onCommentSubmit({ author: author, text: text });
      this.setState({ author: '', text: '' });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'form',
        { className: 'commentForm', onSubmit: this.handleSubmit },
        React.createElement('input', {
          type: 'text',
          placeholder: 'Your name',
          value: this.state.author,
          onChange: this.handleAuthorChange
        }),
        React.createElement('input', {
          type: 'text',
          placeholder: 'Say something...',
          value: this.state.text,
          onChange: this.handleTextChange
        }),
        React.createElement('input', { type: 'submit', value: 'Post' })
      );
    }
  }]);

  return CommentForm;
}(React.Component);

var Comment = function (_React$Component4) {
  _inherits(Comment, _React$Component4);

  function Comment(props) {
    _classCallCheck(this, Comment);

    //Bind "this" keyword
    var _this4 = _possibleConstructorReturn(this, (Comment.__proto__ || Object.getPrototypeOf(Comment)).call(this, props));

    _this4.render = _this4.render.bind(_this4);
    return _this4;
  }

  _createClass(Comment, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: 'comment' },
        React.createElement(
          'h2',
          { className: 'commentAuthor' },
          this.props.author
        ),
        this.props.children
      );
    }
  }]);

  return Comment;
}(React.Component);

//This must be done at the end before loading


$(document).ready(function () {
  ReactDOM.render(React.createElement(CommentBox, { url: '/react_demo/api/comments', pollInterval: 2000 }), document.getElementById('content'));
});